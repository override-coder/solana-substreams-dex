// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCreatorLayout {
    #[prost(string, tag="1")]
    pub address: ::prost::alloc::string::String,
    #[prost(bool, tag="2")]
    pub verified: bool,
    #[prost(uint32, tag="3")]
    pub share: u32,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCollectionLayout {
    #[prost(bool, tag="1")]
    pub verified: bool,
    #[prost(string, tag="2")]
    pub key: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbUsesLayout {
    #[prost(string, tag="1")]
    pub use_method: ::prost::alloc::string::String,
    #[prost(uint64, tag="2")]
    pub remaining: u64,
    #[prost(uint64, tag="3")]
    pub total: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCollectionDetailsLayout {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint64, tag="2")]
    pub size: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbDataLayout {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub symbol: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub uri: ::prost::alloc::string::String,
    #[prost(uint32, tag="4")]
    pub seller_fee_basis_points: u32,
    #[prost(message, repeated, tag="5")]
    pub creators: ::prost::alloc::vec::Vec<PbCreatorLayout>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbDataV2Layout {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub symbol: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub uri: ::prost::alloc::string::String,
    #[prost(uint32, tag="4")]
    pub seller_fee_basis_points: u32,
    #[prost(message, repeated, tag="5")]
    pub creators: ::prost::alloc::vec::Vec<PbCreatorLayout>,
    #[prost(message, optional, tag="6")]
    pub collection: ::core::option::Option<PbCollectionLayout>,
    #[prost(message, optional, tag="7")]
    pub uses: ::core::option::Option<PbUsesLayout>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbAssetDataLayout {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub symbol: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub uri: ::prost::alloc::string::String,
    #[prost(uint32, tag="4")]
    pub seller_fee_basis_points: u32,
    #[prost(message, repeated, tag="5")]
    pub creators: ::prost::alloc::vec::Vec<PbCreatorLayout>,
    #[prost(bool, tag="6")]
    pub primary_sale_happened: bool,
    #[prost(bool, tag="7")]
    pub is_mutable: bool,
    #[prost(string, tag="8")]
    pub token_standard: ::prost::alloc::string::String,
    #[prost(message, optional, tag="9")]
    pub collection: ::core::option::Option<PbCollectionLayout>,
    #[prost(message, optional, tag="10")]
    pub uses: ::core::option::Option<PbUsesLayout>,
    #[prost(message, optional, tag="11")]
    pub collection_details: ::core::option::Option<PbCollectionDetailsLayout>,
    #[prost(string, optional, tag="12")]
    pub rule_set: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbPrintSupplyLayout {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(uint64, optional, tag="2")]
    pub val: ::core::option::Option<u64>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCreateArgsLayout {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub asset_data: ::core::option::Option<PbAssetDataLayout>,
    #[prost(uint32, optional, tag="3")]
    pub decimals: ::core::option::Option<u32>,
    #[prost(message, optional, tag="4")]
    pub print_supply: ::core::option::Option<PbPrintSupplyLayout>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCreateMetadataAccountArgsLayout {
    #[prost(message, optional, tag="1")]
    pub data: ::core::option::Option<PbDataLayout>,
    #[prost(bool, tag="2")]
    pub is_mutable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCreateMetadataAccountArgsV2Layout {
    #[prost(message, optional, tag="1")]
    pub data: ::core::option::Option<PbDataV2Layout>,
    #[prost(bool, tag="2")]
    pub is_mutable: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PbCreateMetadataAccountArgsV3Layout {
    #[prost(message, optional, tag="1")]
    pub data: ::core::option::Option<PbDataV2Layout>,
    #[prost(bool, tag="2")]
    pub is_mutable: bool,
    #[prost(message, optional, tag="3")]
    pub collection_details: ::core::option::Option<PbCollectionDetailsLayout>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Arg {
    #[prost(message, optional, tag="1")]
    pub create_metadata_account_args: ::core::option::Option<PbCreateMetadataAccountArgsLayout>,
    #[prost(message, optional, tag="2")]
    pub create_metadata_account_args_v2: ::core::option::Option<PbCreateMetadataAccountArgsV2Layout>,
    #[prost(message, optional, tag="3")]
    pub create_metadata_account_args_v3: ::core::option::Option<PbCreateMetadataAccountArgsV3Layout>,
    #[prost(message, optional, tag="4")]
    pub create_args: ::core::option::Option<PbCreateArgsLayout>,
    #[prost(string, tag="5")]
    pub instruction_type: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InputAccounts {
    #[prost(string, optional, tag="1")]
    pub metadata: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="2")]
    pub mint: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="3")]
    pub mint_authority: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="4")]
    pub payer: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="5")]
    pub system_program: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="6")]
    pub update_authority: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="7")]
    pub use_authority: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(string, optional, tag="8")]
    pub rent: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenMetadataMeta {
    #[prost(string, tag="1")]
    pub block_date: ::prost::alloc::string::String,
    #[prost(int64, tag="2")]
    pub block_time: i64,
    #[prost(string, tag="3")]
    pub tx_id: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub dapp: ::prost::alloc::string::String,
    #[prost(uint64, tag="5")]
    pub block_slot: u64,
    #[prost(uint32, tag="7")]
    pub instruction_index: u32,
    #[prost(bool, tag="8")]
    pub is_inner_instruction: bool,
    #[prost(uint32, tag="9")]
    pub inner_instruction_index: u32,
    #[prost(string, tag="10")]
    pub instruction_type: ::prost::alloc::string::String,
    #[prost(message, optional, tag="11")]
    pub args: ::core::option::Option<Arg>,
    #[prost(message, optional, tag="12")]
    pub input_accounts: ::core::option::Option<InputAccounts>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TokenMetas {
    #[prost(message, repeated, tag="1")]
    pub data: ::prost::alloc::vec::Vec<TokenMetadataMeta>,
}
// @@protoc_insertion_point(module)
